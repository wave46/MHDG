&SWITCH_LST
    steady              = .true.       ! Is it a steady state simulation?
                                        ! .false. = time evolving simulation
                                        ! .true.  = steady state simulation
    read_gmsh           = .true.	! .true. = mesh is read from msh/mesh file format
    readMeshFromSol     = .true.	! .true. = mesh is read from solution file
    set_2d_order	= .true.	! .true. = set the order of the 2d polynomial if not set already 
    order_2d = 8 ! if read_gmsh = .true. and set_2d_order = .true., order of the 2d polynomial
    axisym              = .true.        ! Is it an axisymmetric simulation?
                                        ! true = yes (even for magnetic perturbation)
                                        ! false = no
    init                = 1             ! Initialization type: 1-analytical at nodes; 2-L2 projection
    driftdia            = .false.       ! Set to FALSE to ignore diamagnetic drifts terms
    driftexb            = .false.       ! Set to FALSE to ignore ExB drifts terms
    testcase            = 54            ! Determine the analytical solution and the body forces !!60 for circ CircLimAlign_Quads_Nel588_P6 mesh for circ case
    OhmicSrc            = .true.        ! True to set Ohmic source of energy
    ME                  = .false.        ! True to allow magnetic equilibrium evolution in time
    RMP                 = .false.       ! True to set RMP (non-axisymetrical perturbation)
    Ripple              = .false.       ! True to set Ripple (non-axisymetrical perturbation)
    psdtime             = .false.        ! Reduce the diffusion every time we reach the steady state
                                        ! condition (only works if steady=.false.)
    diffred             = 0.6  ! Reduction factor of the diffusion for psdtime simulation (set for 20*diff_x)
    !diffred             = 0.76923076923
    diffmin             = 0.001           ! Minimum value of the diffusion for a psdtime simulation
    shockcp             = 0             ! Shock capturing option
                                        ! 0 - No shock capturing
                                        ! 1 - Constant in each element
                                        ! 2 - Linear interpolation between nodes
                                        ! 3 - Linear interpolation between nodes+save parameter
    limrho              = 0             ! Option for limiting the min value of rho
                                        ! 0 - No limiting
                                        ! 1 - Use a constant source in flagged elements
                                        ! 2 - Use a constant diffusion in flagged elements
                                        ! 3 - Use a constant source & diffusion in flagged elements
    difcor              = 0             ! Add diffusion in corners: the value of the integer determines
                                        ! the position of the corner
    thresh              = 0             ! Use a threshold for limiting the min value of rho
                                        ! 0 - No threshold
                                        ! 1 - Threshold on conservative values (substitute with numer%thr at nodes)
                                        ! 2 - Threshold on physical values (substitute with numer%thr or numer%thrpre at nodes)
                                        ! 3 - Threshold with filtering (substitute with numer%thr or numer%thrpre)
    filter              = .false.       ! Filter solution to avoid oscillation in empty zones
    !****** N-Gamma-Ti-Te model
    decoup              = .false.       ! decouple the N-Gamma system from the Ti-Te system
                                        ! true: decouple N-Gamma from Ti-Te
                                        ! false: coupled system
    ckeramp             = .false.       ! check the error amplification in the linear system solution (for very ill-conditioned matrices)
    saveNR              = .true.        ! save each N-R iterations
    saveTau             = .false.       ! save tau on faces
    gmsh2h5		= .true.	! convert the gmsh read in input to hdf5 format
    saveMeshSol		= .true.	! save the mesh in the solution file
    !***** N-Gamma-Vorticity model
    fixdPotLim          = .false.       ! Fix potential at the floating potential on the limiter
    dirivortcore        = .false.       ! Dirichlet boundary condition on the vorticity in the core boundary
    dirivortlim         = .false.       ! Dirichlet boundary condition on the vorticity in the limiter boundary
    convvort            = .false.       ! Consider the convective term in the vorticity equation
    pertini             = 0             ! Add perturbation. 0-no perturbation; 1-sinusoidal perturbation; 2-blob
    logrho              = .false.
    bxgradb             = .false.       ! Consider the term in BxGradB in the vorticity equation

/

&INPUT_LST
    field_path          = 'path/to/magnetic/field.h5'  ! Path to Bfield h5 file. 
                                                                        ! If switch%ME = .true. then omit numbering part like 'B_field/WEST_54487'
                                                                        ! If switch%ME = .false. then put the full part 'B_field/WEST_54487_0000.h5'
    field_dimensions(1) = 2000                                   ! 1st dimension dimensions of magnetic field file (200x200)
    field_dimensions(2) = 2000                                   ! 2nd dimension dimensions of magnetic field file
    field_from_grid = .true.                                   ! true then reads from cartesian grid and then biineary interpolates on nodes
                                                                ! false then reads from files with field on nodes
    compute_from_flux   = .false.                                ! if the Br, Bz is computed from flux works not well, only with loading from nodes
    divide_by_2pi       = .false.                               ! if corresponding to poloidal flux definition it is needed to divide by 2pi. For NICE .true.
                                                                ! for FEEQS .false.
    jtor_path           = 'path/to/plasma/current.h5'    ! Path to jtor h5 file. 
                                                                        ! If switch%ME = .true. then omit numbering part like 'Jtor/WEST_54487_Jtor'
                                                                        ! If switch%ME = .false. then put the full part 'Jtor/WEST_54487_Jtor_0000.h5'
    jtor_dimensions(1) = 2000                                   ! 1st dimension dimensions of plasma current file 457x457
    jtor_dimensions(2) = 2000                                   ! 2nd dimension dimensions of plasma current file
    save_folder = 'path/where/to/save/'
/

&NUMER_LST
    tau(1)              = 1.E+0         ! Stabilization parameter 1st equation
    tau(2)              = 1.E+0         ! Stabilization parameter 2nd equation
    tau(3)              = 1.E+0         ! Stabilization parameter 3rd equation
    tau(4)              = 1.E+0         ! Stabilization parameter 4th equation
    tau(5)              = 1.E-0         ! Stabilization parameter 5th equation
    nrp                 = 40          ! Max number of Newton-Raphson iterations
    tNR                 = 2e-4          ! Tolerance of the Newton-Raphson scheme
    tTM                 = 1e-8          ! Tolerance for the steady state achievement
    div                 = 1e5           ! Divergence of Newton-Raphon iteration
    sc_coe              = 0             ! Shock capturing coefficient
    sc_sen              = 1.4           ! Shock capturing sensibility
    minrho              = 1.e-12        ! Value of rho to start applying limiting
    so_coe              = 0.01          ! Coefficient of the source for limiting rho
    df_coe              = 100.          ! Coefficient of the diffusion for limiting rho
    dc_coe              = 100           ! Coefficient of the diffusion to add in the corners
    thr                 = 1.e-12        ! Min value of density allowed (works only if the switch is activated)
    thrpre              = 1.e-12        ! Min value of pressure allowed (works only if the switch is activated)
    stab                = 5             ! Stabilization type (from 1 to 4 (5), 2 is good, 5 is better (simplified 2, only for N-Gamma(-T))
    dumpnr_min          = 0.1! Dumping factor for Newton-Raphson (0<dumpnr<1, first parameter to decrease if NR fail) typical 0.1
    dumpnr_max          = 1.
    dumpnr_width        = 10.
    dumpnr_n0           = 10.
    ntor                = 3             ! Number of elements in the toroidal direction
    ptor                = 4             ! Polynomial degree in the toroidal direction
    tmax                = 1.5708        ! Max extention in the toroidal direction
    npartor             = 1             ! Number of MPI partition in the toroidal direction
    bohmtypebc          = 0             ! Implementation of the Bohm bc for Gamma (0-Old Bohm BC, 1-Dirichlet always, 2-Dirichlet+Neumann)
    exbdump             = 1.            ! Dumping for ExB drift
/

&ADAPT_LST
    adaptivity		= .true.	! Enable or disable adaptivity [0,1]
    shockcp_adapt       = 2             ! Shock capturing option for adaptivity (2)
                                        ! 0 - No shock capturing
                                        ! 1 - Constant in each element
                                        ! 2 - Linear interpolation between nodes
                                        ! 3 - Linear interpolation between nodes+save parameter
    evaluator		= 0		! Mixed, indicator, estimator [0,1,2]
    param_est		= 0		! Mixed, density, p_velocity ... [0,1,2,...] !on physical variable
    thr_ind		= 1e-20		! Catch oscillations if higher than this value (indicator)
    quant_ind		= 1		! 1,2,3 (physical variable(s), gradient of variable(s), both)
    n_quant_ind		= 0		! 1,2,3 for iso (n,u, Mach). 1,2,3,4,5 for aniso (n,u,Ti,Te,Mach), 0 for all of them
    tol_est		= 5e-1		! Difference between p+1 and p solution (estimator)
    difference		= 1		! Type of difference: relative, absolute [0,1]
    time_adapt		= .true.	! Refine at times steps (pseudo or not)
    NR_adapt		= .false.	! Refine at NR steps (pseudo or not)
    freq_t_adapt	= 1		! Frequency of time refinement, only if time_adapt = .true.
    freq_NR_adapt	= 5		! Frequency of NR refinement, only if NR_adapt = .true.
    div_adapt		= .false.	! Refine if NR diverges
    rest_adapt		= .true.	! Call adaptivity at the very beginning, only for restart simulations
    osc_adapt		= .true.	! Refine if oscillations are higher than threshold
    osc_tol		= -2.8		! Refine if oscillations are higher than this threshold, only if osc_adapt = .true.
    osc_check		= -3.		! Save the solution as checkpoint if the maximum value of oscillations are lower than this threshold (-100 for no oscillations at all)
/

&GEOM_LST
    R0 = 3.4
    q  = 3.5
/

&MAGN_LST
    ! ******** RMP *******
    amp_RMP             = 5.e-5       ! amplitude RMP
    nbCoils_RMP         = 8           ! number coils RMP (full torus)
    torElongCoils_RMP   = 0.3926991   ! Toroidal elongation of RMP coils (rectangular coils)
    parite              = -1          ! parite RMP (for 2 row, -1 even parite, 1 odd)
    nbRow               = 2           ! number of rows (1,2 or 3) of RMP coils, default is 2
    ! ****** Ripple ******
    amp_Ripple          = 5.e-4     ! amplitude Ripple
    nbCoils_Ripple      = 18        ! number coils Ripple (full torus)
    triang              = 0.0       ! triangularity (0: None)
    ellip               = 1.0       ! ellipticity (1: None)
/


&TIME_LST
    dt0                 = 3e9        ! Initial time step 3.e9 1.6395702112189546e5
    nts                 = 30           ! Max number of time iterations to do in the current session (only for transient simulations) 30
    tfi                 = 1e10           ! Final time: the simulation stops when this time is reached
    tsw                 = 0             ! Switch to modify the time step
                                        ! 0 = dt is not modified
                                        ! 1 = ...
    tis                 = 1             ! Time integration scheme (1-7)
/

&PHYS_LST
    ! ****** Diffusion parameters in m^2/s (start at 20*diff_x if psdtime = true)
    diff_n = 0.26! diffusion in the continuity equation
    diff_u =  0.26! diffusion in the momentum equation
    diff_e =0.66667 ! perpendicular diffusion for the energy equation
    diff_ee =   0.66667  ! perpendicular diffusion in the electron temperature equation (for the TiTe model)
    diff_vort = 0.66667! diffusion in the vorticity equation
    v_p = 0. ! Pinch velocity in the continuity equation (Pinch = vp*(psi^2 + psi^2*tanh((0.95 - psi)/0.02)) with psi = 1. at separatrix )
    diff_nn = 2e4 ! diffusion for neutral equation
    ! external heating in the form of shifted 2D gaussian ~exp(-(r-(R0+dr)**2/sigmar**2))*exp(-(z-(Z0+dz)**2/sigmaz**2))
    heating_power = 0.              ! [W] Total power of heating 
    heating_dr = 0.0                 ! [m] displacement from magnetic axis alon R direction (can be positive and negative)
    heating_dz = 0.                 ! [m] displacement from magnetic axis alon R direction (can be positive and negative)
    heating_sigmar = 0.15             ! [m] gaussian width in r-direction
    heating_sigmaz = 0.15             ! [m] gaussian width in z-direction
    heating_equation = 3            ! equation to which heating is applied
    ! ****** Option for neutral equation (available only if compile with NEUTRAL)
    Re                  = 0.9     ! Recycling coefficient 0.997
    Re_pump             = 0.9     ! Recycling coefficient in the pump region
    puff                = 4e20 ! puff coefficient (particles per second in the whole puff area) 2.5e18 5.e18
    cryopump_power      = 0.      ! cryopump power in [m^3/s]
    density_source      = 1.59      ! amplitude of the truncated gaussian density source for WEST with core (case 52)
    ener_source_e       = 150.      ! amplitude of the truncated ion energy source (case 52 and 81)
    ener_source_ee      = 150.      ! amplitude of the truncated electron energy source (case 52 and 81)
    sigma_source        = 0.05      ! sigma of the truncated gaussian sources (case 52 and 81)
    fluxg_trunc         = 0.2       ! value of the NORMALISED magnetic surface at which truncate the gaussian source WEST (case 52)
    part_source         = 0.        ! source coefficient (particles per second in the whole core area [ONLY BC 6])
    ener_source         = 20e6      ! source coefficient (Watt in the whole core area [ONLY BC 6])
    ! kequation part
    !diff_k_min = 10.  ! minimal diffusion in the k equation
    !diff_k_max = 10. ! maximal diffusion in the k equation
    !k_max = 1.e10      ! maximal k
    !puff               = 1.8e-6
    !puff               = 2.e-5
    ! ****** Ohmic heating: only for testcase 54 with core (not tested)
    Pohmic              = 7.2e-14       ! Ohmic Heating
    ! ****** Background temperature in eV for isothermal model (default is 50 eV)
    Tbg                 = 50
    ! ****** Boundary conditions: set the correspondance between boundary flag and boundary condition
    ! each component must be put separetly
    ! The dimension of bcflags is set to 10, means that at most 10 different kinds of boundary
    ! condition can exist
    bcflags(1:4)        = 1 1 1 1
    bcflags(5)          = 55            ! Pump
    bcflags(6)          = 56            ! Puff
    bcflags(7)          = 50            ! Limiter
    bcflags(8)          = 2             ! In
    bcflags(9)          = 50            ! Out
    bcflags(10)         = 50            ! Upper Limiter
    ! ****** Boundary threshold for Bohm
    bohmth              = 0.00           ! threshold for imposing the bohm boundary condition !for circ put 0.1 0.02
    ! ****** Boundary coefficients for the Bohm boundary condition of the temperature equations:
    Gmbohm              = 2.5           ! gamma for Bohm boundary condition for energy equation (usually 7) and for ions energy equation (usually 2.5)
    Gmbohme             = 4.5           ! gamma for Bohm boundary condition for electron energy equation (usually 4.5)
    ! ****** Coefficients used only for testcase < 10 (otherwise computed internally)
    a                   = 25            ! Isothermal compressibility constant (p = a*rho)
    Mref                = 12.4926       ! Non-isothermal compressibility constant
    tie                 = -579.6657     ! temperature interchange coefficient ions-electrons
    diff_pari           = 10            ! (3.1475e5) parallel diffusion for the ions temperature
    diff_pare           = 20            ! (1.0492e7) parallel diffusion for the electron temperature
    diff_pot            = 4             ! diffusion in the potential equation (only used for analytic tests)
    ! **** Non isothermal exponential
    epn                 = 2.5           ! exponential of the parallel diffusion for the temperature
    ! ***** Coefficients for the vorticity model
    etapar              = 1e-5
    Potfloat            = 3.
    diagsource          = 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
/

&UTILS_LST
    printint            = 1             ! how much info we want to print
    dotiming            = true          ! timing of the code
    freqdisp            = 1             ! frequency of result display
    freqsave            = 1             ! frequency of solution save
/

&LSSOLV_LST
    sollib              = 1             ! Solver library to be used
                                        ! 1-Pastix (Limit found in 3D for total nnz > 2*31-1 even with in64 compilation)
                                        ! 2-PSBLAS (all options below TODO: find a combination that works!)
                                        ! 3-PETSc 
    lstiming            = true

    ! Parameters relative to the library PETSc
    kspitrace           = 0             ! Display convergence at each iteration
    rtol		= 5e-12		! Relative tollerance
    atol                = 1e-50         ! Absolute tollerance
    kspitmax            = 2000         ! Max number of iterations
    igz			= .false.	! Set initial guess of the iterative method equal to zero
    rprecond		= 1		! Recompute conditioner ( 1 every NR iteration, 2 each Nreprecond iterations, 3 if kspitmax has been reached)
    Nrprecond		= 1		! Recompute preconditioner each Nrprecond iterations 
    kspnorm		= 2		! Ksp norm type (1 preconditioned, 2 unpreconditioned)
    !kspmethd		= 'KSPPREONLY'	! Krylov method KSPCG KSPBCGS KSPGMRES KSPPREONLY KSPMINRES KSPRICHARDSON and more 
    kspmethd		= 'KSPBCGS'	! Krylov method KSPCG KSPBCGS KSPGMRES KSPPREONLY KSPMINRES KSPRICHARDSON and more 
    pctype		= 'PCLU'	! Preconditioner type PCNONE PCJACOBI PCSOR PCLU PCILU PCGAMG PCMG and more
    !pctype		= 'PCJACOBI'	! Preconditioner type PCNONE PCJACOBI PCSOR PCLU PCILU PCGAMG PCMG and more
    gmresres            = 30            ! Restart of the GMRES method (30 default)
    mglevels		= 1		! Number of levels for the MG preconditioner
    mgtypeform		= 1		! Form of the MG preconditioner (1 multiplicative, 2 additive, 3 full, 4 Kaskade)
    
    
    ! Parameters relative to the library PSBLAS
    itmax               = 500           ! Max number of iterations
    itrace              = 0             ! Display convergence at each iteration
    rest                = 0             ! Restart
    istop               = 1             ! Stopping criterion (see spec on the library manual)
    tol                 = 1e-5          ! Stopping tolerance
    kmethd              = 'BICGSTAB'    ! Krylov method (CG CGS GCR FCG BICG BICGSTAB BICGSTABL RGMRES)
    ptype               = 'JACOBI'      ! Preconditioner type (NONE DIAG JACOBI GS FBGS BJAC AS ML)

    ! Parameters relative to the library MLD2P4
    ! First smoother (ML) / 1-lev preconditioner (other ptype)
    smther              = 'JACOBI'      ! Smoother type: NONE DIAG JACOBI GS FBGS BJAC AS (ML default=ML) For 1-level, repeats previous.
    jsweeps             = 1             ! Number of sweeps for smoother
    novr                = 0             ! Number of overlap layers for AS
    restr               = 'HALO'        ! AS restriction operator: NONE HALO
    prol                = 'NONE'        ! AS prolongation operator: NONE SUM AVG
    solve               = 'ILU'         ! Subdomain solver for BJAC/AS: JACOBI GS BGS ILU ILUT MILU MUMPS SLU UMF
    fill                = 0             ! Fill level P for ILU(P) and ILU(T,P)
    thrsol              = 1.d-4         ! Threshold T for ILU(T,P)

    ! Second smoother (ML-only)
    smther2             = 'NONE'        ! Second (post) smoother: NONE DIAG JACOBI GS FBGS BJAC AS (ML default=ML)
    jsweeps2            = 1             ! Number of sweeps for (post) smoother
    novr2               = 0             ! Number of overlap layers for AS preconditioner
    restr2              = 'HALO'        ! AS restriction operator: NONE HALO
    prol2               = 'NONE'        ! AS prolongation operator: NONE SUM AVG
    solve2              = 'ILU'         ! Subdomain solver for BJAC/AS: JACOBI GS BGS ILU ILUT MILU MUMPS SLU UMF
    fill2               = 0             ! Fill level P for ILU(P) and ILU(T,P)
    thrsol2             = 1.d-4         ! Threshold T for ILU(T,P)

    ! Multilevel parameters (ML-only)
    mlcycle             = 'VCYCLE'      ! Type of multilevel CYCLE: VCYCLE WCYCLE KCYCLE MULT ADD
    outer_sweeps        = 4             ! Number of outer sweeps for ML
    maxlevs             = -3            ! Max Number of levels in a multilevel preconditioner; if <0, lib default
    csize               = -3            ! Target coarse matrix size; if <0, lib default
    aggr_prol           = 'SMOOTHED'    ! Type of aggregation: SMOOTHED UNSMOOTHED
    par_aggr_alg        = 'DEC'         ! Parallel aggregation: DEC, SYMDEC
    aggr_ord            =  'NATURAL'    ! Ordering of aggregation NATURAL DEGREE
    aggr_filter         = 'NOFILTER'    ! Filtering of matrix:  FILTER NOFILTER
    mncrratio           = -1.5          ! Coarsening ratio, if < 0 use library default
    athres              = -2            ! Smoothed aggregation threshold, ignored if < 0

    ! Coarse level solver (ML-only)
    csolve              = 'BJAC'        ! Coarsest-level solver: NONE JACOBI GS BJAC MUMPS UMF SLU SLUDIST
    csbsolve            = 'ILU'         ! Coarsest-level subsolver for BJAC: ILU ILUT MILU UMF MUMPS SLU
    cmat                = 'DIST'        ! Coarsest-level matrix distribution: DIST  REPL
    cfill               = 1             ! Coarsest-level fillin P for ILU(P) and ILU(T,P)
    cthres              = 1.d-4         ! Coarsest-level threshold T for ILU(T,P)
    cjswp               = 1             ! Number of sweeps for JACOBI/GS/BJAC coarsest-level solver
/
